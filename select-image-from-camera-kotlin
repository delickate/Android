//SANI: Create a button and on button click open file browsing
// layout.xml
<Button
                android:layout_height="wrap_content"
                android:layout_gravity="center_vertical"
                android:layout_width="wrap_content"
                android:text="Select File"
                android:id="@+id/file_upload"
                />
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:id="@+id/selected_file"
                />
                
//SANI: In fragment kotlin file declare variables
companion object {
        /**
         * Use this factory method to create a new instance of
         * this fragment using the provided parameters.
         *
         * @param param1 Parameter 1.
         * @param param2 Parameter 2.
         * @return A new instance of fragment ContactusFragment.
         */

        private val REQUEST_TAKE_PHOTO = 0
        private val REQUEST_SELECT_IMAGE_IN_ALBUM = 1
        private val REQUEST_IMAGE_CAPTURE = 0
        }
        
///////////////////////// FILE UPLOAD /////////////////////////

        val file_upload: Button =  view.findViewById(R.id.file_upload)
        file_upload.setOnClickListener {
            selectImageFromCamera()
        }
///////////////////////////////////////////////////////////////   

//////////////////SANI: File upload from Camera ///////////////////////////////
    fun selectImageFromCamera() {
        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        val frag = this


        if (intent.resolveActivity(getActivity()!!.getPackageManager()) != null) {
            frag.startActivityForResult(intent, REQUEST_TAKE_PHOTO)
        }
    }



    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (resultCode == Activity.RESULT_OK) {
            if (requestCode == REQUEST_IMAGE_CAPTURE) {
                // Do something with imagePath
                val image_view: ImageView =  view!!.findViewById(R.id.selected_file)
                val photo = data!!.extras!!.get("data") as Bitmap
                image_view.setImageBitmap(photo)
                // CALL THIS METHOD TO GET THE URI FROM THE BITMAP
               // var selectedImage = getImageUri(activity, photo)
               // val realPath = getRealPathFromURI(selectedImage)
               // selectedImage = Uri.parse(realPath)
            }
        }
    }

    ///////////////////SANI: END: File upload from Camera ////////////////////////
